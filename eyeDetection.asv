function EyeMapThresholded = eyeDetection(YCrCb)

    % Chrominance component calculation
    Y = double(YCrCb(:,:,1));
    Cb = double(YCrCb(:,:,2));
    Cr = double(YCrCb(:,:,3));

    %EyeMapC -----------
    
    % % Chromincance eyemap
    % eyeMapC = ((Cb.^2)+((1-Cr).^2)+(Cb./Cr))./3; 
    % 
    % %Histogram normalization
    % normImg = histeq(eyeMapC);
    % EyeMap = normImg; 
    % 
    % %EyeMapL -----------
    % 
    % %Structure element size based on height
    % SE_height = round(length(EyeMap(:,1))/24);
    % SE = strel('disk',SE_height,8);
    % 
    % eyemapL=double(imdilate(Y,SE))./double(imerode(Y,SE) + 1);
    % 
    % % Normalizing EyeMapL between 0 and 255 
    % EyeMapThresholded = double(255 * mat2gray(eyemapL));
    % 
    % eyemap = EyeMap.*EyeMapThresholded;
    % 
    % %Make binary mask
    % eyemap = eyemap >= 0.80; 
    % 
    % % Morphological operations to remove unnecessary blobs from EyeMap
    % SE = strel('disk',7);
    % eyemap = imdilate(eyemap, SE);
    % eyemap = imdilate(eyemap, SE);
    % eyemap = imerode(eyemap, SE);
    % eyemap = imclearborder(eyemap);
    % 
    % % Remove impossible eye candidates
    % [height, width] = size(eyemap);
    % 
    % statsEye = regionprops(eyemap, 'centroid',  'PixelIdxList', 'MajorAxisLength', 'MinorAxisLength');
    % centAxisEyes = cat(1, statsEye.MajorAxisLength);
    % 
    % centroidseye = cat(1, statsEye.Centroid);
    % [numOfEyes, ~] = size(centroidseye);
    % 
    %  for i=1:numOfEyes  
    %    if centroidseye(i,2) > height*0.66 || centroidseye(i,2) < height*0.3
    %      eyemap(statsEye(i).PixelIdxList) = 0;
    %    end
    %    if centAxisEyes(i,1) > 100
    %        eyemap(statsEye(i).PixelIdxList) = 0;
    %    end
    %  end
    

    % % Normalize (Cb^2), (Cr^2), and (Cb/Cr) 0-255
    % Cb2_norm = normalize(Cb.^2, 'norm');
    % Cb2_255_norm = normalize((Cb.^2)-1, 'norm');
    % CbCr_norm = normalize((Cb./Cr), 'norm');
    % % Chrominance map
    % EyeMapC = (1/3) * (Cb2_norm + Cb2_255_norm + CbCr_norm);
    % 
    % % Luminance component calculation
    % radius = 9; % 9 is the smallest it can be
    % se = strel('disk', radius);
    % % Apply the kernel, here se, to the luminance component
    % dilationY = imdilate(Y, se);
    % erosionY = imerode(Y, se);
    % 
    % % Luminance map
    % EyeMapL = dilationY ./ (erosionY + 1);
    % 
    % EyeMap = EyeMapL .* EyeMapC;
    % 
    % threshold = 0.45; % Tweak if needed, 0.5 worked fine
    % EyeMapThresholded = (EyeMap > threshold);
    % 
    % EyeMapThresholded = imdilate(EyeMapThresholded, se);
    % EyeMapThresholded = imdilate(EyeMapThresholded, se);
    % EyeMapThresholded = imerode(EyeMapThresholded, se);
    % EyeMapThresholded = imdilate(EyeMapThresholded, se);
    % EyeMapThresholded = imerode(EyeMapThresholded, se);
   
end
